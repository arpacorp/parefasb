#!/bin/bash
# ARPA - PAREF App Server Builder / v1.0 / 2021.01.13
#  Copyright (C) 2021, Federick Joe P Fajardo <eric@arpa.ph>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

## START GENERAL SETTINGS ##
BINPT=/usr/local/bin
TZONE=Asia/Manila
HEADER="`sed -n '2p' $0` - `date`"
DATE=$(date '+%Y%m%d-%H%M%S')
UTFC="\xE2\x88\x9A"
UTFY="\xE2\x9D\xA4"
UTFX="\xE2\x9C\x9D"
X="\x1B[01;33m"
Y="\x1B[0m"
## END GENERAL SETTINGS ##

## Logging functions
function disp_stat(){ printf "\x1B[01;34m[$UTFX]\x1B[0m $1"; }
function disp_good(){ printf "\x1B[01;32m[$UTFC]\x1B[0m $1"; }
function disp_errr(){ printf "\x1B[01;31m[$UTFX]\x1B[0m $1"; }
function disp_noti(){ printf "\x1B[01;33m[$UTFY]\x1B[0m $1"; }
function errr_exit()
{
        disp_errr "${PROGNAME}: ${1:-"Unknown Error"}\n" 1>&2
        exit 1
}

clear

## Man pages installation
if [[ -f /usr/share/man/man8/configure.8.gz ]]; then
        disp_good "$DATE - Man page found.\n";
else
        disp_good "$DATE - Installing man pages...\n";
        cp -fp `pwd`/configure.1 /usr/share/man/man8/configure.8
        gzip /usr/share/man/man8/configure.8
fi

## Initial symlink setup
if [[ -d /etc/parefconfigure ]] && \
   [[ -f $BINPT/configure ]] && \
   [[ -f $BINPT/gencfvar.sh ]] && \
   [[ -f /bin/configure ]]; then
        disp_good "$DATE - All symlinks found $BINPT/configure.\n";
else
        disp_good "$DATE - Recreating symlink...\n";
		rm -f $BINPT/configure;rm -f /bin/configure;rm -f $BINPT/gencfvar.sh;rm -f /etc/parefconfigure
                ln -s `pwd`/configure $BINPT/configure
                ln -s $BINPT/configure /bin/configure
                ln -s `pwd`/gencfvar.sh $BINPT/gencfvar.sh
                ln -sr `pwd`/parefconfigure /etc/parefconfigure
fi

## Source the source
source /usr/local/bin/gencfvar.sh
touch $LOGFILE;

## Environment preparation function
function check_binaries(){
dialog --backtitle "Copyright. Arpacorp. 2021. https://arpa.ph" \
	--title " Preparing the environment " --msgbox "`cat $CUSTOM_ENV`" 15 80
	clear

  disp_good "$DATE - Checking binaries...\n" | tee -a $LOGFILE;
  if [[ -f "/etc/lsb-release" ]]; then
       	disp_good "$DATE - Running OS: `cat /etc/lsb-release | grep DESC | cut -d= -f2`\n" | tee -a $LOGFILE;

        BUILD_DEPS="software-properties-common" && dpkg-reconfigure locales
        apt-get install --no-install-recommends -y $BUILD_DEPS
        add-apt-repository -y ppa:ondrej/php && apt-get update -y
        apt-get -y update && apt-get -y upgrade

        BASEPKGS="`echo "$BASEPKGS_U" | sed 's/|/ /g'`"
        for i in $BASEPKGS iptables ipset
        {
                disp_stat "$DATE - Checking ${i}...\n" | tee -a $LOGFILE;
                if [ ! -x "$(which $i)" ]; then
                        disp_stat "$DATE - Installing packages... {\033[1m$i\033[0m}\n" | tee -a $LOGFILE;
                        apt-get install -y ${i}
                if [ $? -eq 0 ]; then
                        disp_good "$DATE - Packages successfully installed.\n" | tee -a $LOGFILE;
                else
                        disp_errr "$DATE - Packages failed to install!\n" | tee -a $LOGFILE;
                        exit 1
                fi
                        else
                disp_stat "$DATE - ${i} Okay.\n" | tee -a $LOGFILE;
                apt autoremove -y
                fi
        }

elif [[ -f "/etc/redhat-release" ]]; then
        disp_good "$DATE - Running OS: `cat /etc/redhat-release`\n" | tee -a $LOGFILE;
        yum -y update && yum -y upgrade

        BASEPKGS="`echo "$BASEPKGS_C" | sed 's/|/ /g'`"
        for i in $BASEPKGS iptables ipset
        {
                disp_stat "$DATE - Checking ${i}...\n" | tee -a $LOGFILE;
                if [ ! -x "$(which $i)" ]; then
                        disp_stat "$DATE - Installing package... {\033[1m$i\033[0m}\n" | tee -a $LOGFILE;
                        yum -y install ${i}
                if [ $? -eq 0 ]; then
                        disp_good "$DATE - Packages successfully installed.\n" | tee -a $LOGFILE;
                else
                        disp_errr "$DATE - Packages failed to install!\n" | tee -a $LOGFILE;
                        exit 1
                fi
                        else
                disp_stat "$DATE - ${i} Okay.\n" | tee -a $LOGFILE;
                fi
        }
else
        disp_errr "$DATE - Non-supported operating system.\n" | tee -a $LOGFILE;
fi
}

function check_modules(){
        DBASEMOD="`echo "$DMODULE_U" | sed 's/|/ /g'`"
        disp_stat "$DATE - Disabling modules... {\033[1m$DBASEMOD\033[0m}\n" | tee -a $LOGFILE;
                a2dismod --force $DBASEMOD

        EBASEMOD="`echo "$EMODULE_U" | sed 's/|/ /g'`"
        disp_stat "$DATE - Enabling modules... {\033[1m$EBASEMOD\033[0m}\n" | tee -a $LOGFILE;
                a2enmod $EBASEMOD
                disp_good "$DATE - Loading module completed.\n" | tee -a $LOGFILE; sleep 3
}

function load_misc(){
        disp_stat "$DATE - Setting Timezone...\n" | tee -a $LOGFILE; sleep 3
                timedatectl set-timezone $TZONE
        disp_good "$DATE - Timezone changed.\n" | tee -a $LOGFILE;

        disp_stat "$DATE - Loading /etc/hosts...\n" | tee -a $LOGFILE; sleep 3
                cat $XHST | grep -A 8 "True" > $TMPDIR/hosts
                        echo "10.104.0.2 gfsv.x.paref.edu.ph glusterx" >> $TMPDIR/hosts
                        echo "10.104.0.3 gfsv.y.paref.edu.ph glustery" >> $TMPDIR/hosts
                        echo "10.104.0.6 dbsv.paref.edu.ph dbsv" >> $TMPDIR/hosts
                cp $TMPDIR/hosts $XHST
        disp_good "$DATE - /etc/hosts changes completed.\n" | tee -a $LOGFILE;

        disp_stat "$DATE - Copying default php.ini...\n" | tee -a $LOGFILE; sleep 3
        	cp $BASEPATH/php.ini.orig $PHPDIR/php.ini
	disp_good "$DATE - php.ini completed.\n" | tee -a $LOGFILE;
	
	disp_stat "$DATE - Adding GFS connectivity...\n" | tee -a $LOGFILE; sleep 3
                echo "LABEL=cloudimg-rootfs   /        ext4   defaults        0 0" > $XFST
                echo "LABEL=UEFI      /boot/efi       vfat    defaults        0 0" >> $XFST
                echo "glusterx:volgfs /storage glusterfs defaults,_netdev,backupvolfile-server=glustery 0 0" >> $XFST
                mount -t glusterfs glusterx:volgfs /storage
        disp_good "$DATE - GFS volume connected.\n" | tee -a $LOGFILE;sleep 10

}

function exec_newsrvr(){
	clear
                # 01 SERVER NAME
                SERVERCODE=$(dialog --title " SERVER CONFIGURATION " \
                --inputbox "`cat $CUSTOM_SERVERCODE`" 10 80 3>&1 1>&2 2>&3 3>&-)
                echo "$SERVERCODE" > $TMPDIR/x1.tmp

		# 02 SERVER NAME
                SERVERNAME=$(dialog --title " SERVER CONFIGURATION " \
                --inputbox "`cat $CUSTOM_SERVERNAME`" 17 80 3>&1 1>&2 2>&3 3>&-)
                echo "$SERVERNAME" > $TMPDIR/x2.tmp

                # 03 SERVER PORT
                HTTPSPORT=$(dialog --title " SERVER CONFIGURATION " \
                        --inputbox "`cat $CUSTOM_HTTPSPORT`" 12 80 3>&1 1>&2 2>&3 3>&-)
                echo "$HTTPSPORT" > $TMPDIR/x3.tmp

                # 04 SERVER TOKEN
                dialog --title " SERVER CONFIGURATION " --yesno "`cat $CUSTOM_SERVERTOKENS`" 7 80 && {
                echo "Prod" > $TMPDIR/x4.tmp
                } || {
                echo "OS" > $TMPDIR/x4.tmp
                }

                # 05 SERVER SIGNATURE
                dialog --title " SERVER CONFIGURATION " --yesno "`cat $CUSTOM_SERVERSIGNATURE`" 7 80 && {
                echo "Off" > $TMPDIR/x5.tmp
                } || {
                echo "On" > $TMPDIR/x5.tmp
                }

                # 06 CONFIGURE LET'S ENCRYPT
                dialog --title " SERVER CONFIGURATION " --yesno "`cat $CUSTOM_CERTBOT`" 8 80 && {
                echo "Yes" > $TMPDIR/x6.tmp
                } || {
                echo "No" > $TMPDIR/x6.tmp
                }

                # 07 APPLY APACHE SECURITY SETTINGS
                dialog --title " SERVER CONFIGURATION " --yesno "`cat $CUSTOM_SECURITY`" 12 80 && {
                echo "Yes" > $TMPDIR/x7.tmp
                } || {
                echo "No" > $TMPDIR/x7.tmp
                }

                # 08 APPLY DISABLE HTTP PORT
                dialog --title " SERVER CONFIGURATION " --yesno "`cat $CUSTOM_DISABLEHTTP`" 12 80 && {
                echo "Yes" > $TMPDIR/x8.tmp
                } || {
                echo "No" > $TMPDIR/x8.tmp
                }

                # 09 CONFIGURE PHP
                MAXSIZE=$(dialog --title " SERVER CONFIGURATION " \
                        --inputbox "`cat $CUSTOM_MAXUPLOADSIZE`" 12 80 3>&1 1>&2 2>&3 3>&-)
                echo "$MAXSIZE" > $TMPDIR/x9.tmp

                # 10 CONFIRM AND APPLY CUSTOMIZATION
		echo "ServerCode: `cat $TMPDIR/x1.tmp` \n" > $TMPDIR/build.tmp
                echo "ServerName: `cat $TMPDIR/x2.tmp` \n" >> $TMPDIR/build.tmp
                echo "ServerPort: `cat $TMPDIR/x3.tmp` \n" >> $TMPDIR/build.tmp
                echo "ServerTokens: `cat $TMPDIR/x4.tmp` \n" >> $TMPDIR/build.tmp
                echo "ServerSignature: `cat $TMPDIR/x5.tmp` \n" >> $TMPDIR/build.tmp
                echo "Generate TLS Certificate: `cat $TMPDIR/x6.tmp` \n" >> $TMPDIR/build.tmp
                echo "Enable Apache Security: `cat $TMPDIR/x7.tmp` \n" >> $TMPDIR/build.tmp
                echo "Disable HTTP Port: `cat $TMPDIR/x8.tmp` \n" >> $TMPDIR/build.tmp
                echo "PHP Max Upload Size: `cat $TMPDIR/x9.tmp` \n" >> $TMPDIR/build.tmp

                # Final build confirmation. No to exit.
                dialog --title " SERVER CONFIGURATION " \
			--yesno "`cat $CUSTOM_CONFIRM`\n\n`cat $TMPDIR/build.tmp`" 20 80 && {
			echo "Yes" > $TMPDIR/x10.tmp
                } || {
                        echo "No" > $TMPDIR/x10.tmp
                clear
                exit 1
                }
}

function process_build(){

	clear
	disp_noti "$DATE - Entering Build mode...\n" | tee -a $LOGFILE; sleep 3


        # Declare the build param
	APPLY_CODE="`cat $TMPDIR/build.tmp | grep "ServerCode" | cut -d" " -f2`";
        APPLY_CFG1="`cat $TMPDIR/build.tmp | grep "ServerName" | cut -d" " -f2`";
        APPLY_CFG2="`cat $TMPDIR/build.tmp | grep "ServerPort" | cut -d" " -f2`";
        APPLY_CFG3="`cat $TMPDIR/build.tmp | grep "ServerTokens" | cut -d" " -f2`";
        APPLY_CFG4="`cat $TMPDIR/build.tmp | grep "ServerSignature" | cut -d" " -f2`";
        APPLY_CFG5="`cat $TMPDIR/build.tmp | grep "TLS" | cut -d":" -f2 | cut -d" " -f2`";
        APPLY_CFG6="`cat $TMPDIR/build.tmp | grep "Security" | cut -d":" -f2 | cut -d" " -f2`";
        APPLY_CFG7="`cat $TMPDIR/build.tmp | grep "HTTP" | cut -d":" -f2 | cut -d" " -f2`";
        APPLY_CFG8="`cat $TMPDIR/build.tmp | grep "PHP" | cut -d":" -f2 | cut -d" " -f2`";

        if [[ ! -d "$WEBROOT" ]]; then
                disp_errr "$DATE - DocumentRoot $WEBROOT does not exist, creating...\n" | tee -a $LOGFILE;
                        mkdir -p $WEBROOT;
        fi

	# Creating storage path
	if [[ ! -d $STORPUB/www$APPLY_CODE ]] && \
	   [[ ! -d $STORCON/etc$APPLY_CODE ]]; then
		disp_stat "$DATE - Creating $APPLY_CODE in $STORPUB and $STORCON...\n";sleep 3

		# Create a link from storage to documentroot
		mv $WEBROOT $STORPUB/www$APPLY_CODE
		ln -s $STORPUB/www$APPLY_CODE $WEBROOT

		# Create a link from storage to /etc
		systemctl stop apache2
		mkdir -p $STORCON/etc$APPLY_CODE
		mv /etc/apache2 $STORCON/etc$APPLY_CODE/.
		ln -s $STORCON/etc$APPLY_CODE/apache2 /etc/apache2
		mv /etc/letsencrypt $STORCON/etc$APPLY_CODE/.
		ln -s $STORCON/etc$APPLY_CODE/letsencrypt /etc/letsencrypt
		systemctl start apache2
	else
		disp_good "$DATE - Found servercode in $STORPUB and $STORCON. Not linking.\n";sleep 3
	fi

        # Process build depending on the build file
        disp_stat "$DATE - Copying original configs...\n" | tee -a $LOGFILE;
        cp $BASEPATH/000-default.conf.orig $APACHEDIR/sites-available/000-default.conf
        cp $BASEPATH/security.conf.orig $APACHEDIR/conf-available/security.conf
        cp $BASEPATH/ports.conf.orig $APACHEDIR/ports.conf
        cp $BASEPATH/php.ini.orig $PHPDIR/php.ini
	cp $BASEPATH/robots.txt $WEBROOT/robots.txt

        # 01 Apache modifications
        disp_stat "$DATE - Modiying Apache configuration...\n" | tee -a $LOGFILE; sleep 3
	disp_stat "$DATE - Creating default index file...\n" | tee -a $LOGFILE; sleep 3
        	echo "" > $WEBROOT/$XIND
	disp_stat "$DATE - Creating xinfx.php...\n" | tee -a $LOGFILE; sleep 3
		echo "<?php phpinfo(); ?>" > $WEBROOT/$XINF;
	disp_stat "$DATE - Adding .htaccess rewrite rules...\n" | tee -a $LOGFILE; sleep 3
		echo "RewriteEngine On" > $WEBROOT/.htaccess
		echo "RewriteCond %{HTTPS} off" >> $WEBROOT/.htaccess
		echo 'RewriteRule ^(.*)$ https://XXXX-XXXX-XXXX-XXXX/$1 [L,R=301]' >> $WEBROOT/.htaccess

                sed -i "s/XXXX-XXXX-XXXX-XXXX/$APPLY_CFG1/g" $APACHEDIR/sites-available/000-default.conf
		sed -i "s/XXXX-XXXX-XXXX-XXXX/$APPLY_CFG1/g" $WEBROOT/.htaccess
                
	# Restart Apache
	disp_stat "$DATE - Restarting Apache2...\n" | tee -a $LOGFILE; sleep 3
                /usr/sbin/a2ensite 000-default
                /usr/bin/systemctl restart apache2

	if [[ "$APPLY_CFG5" == "Yes" ]]; then
        disp_stat "$DATE - Generating certificate from Certbot...\n" | tee -a $LOGFILE; sleep 3
		certbot --apache --non-interactive --agree-tos --domains "$APPLY_CFG1" --email "$EMAIL";
	else
		disp_good "$DATE - Not generating TLS certificate from Certbot...\n" | tee -a $LOGFILE;
	fi

        disp_stat "$DATE - Applying other web parameters...\n" | tee -a $LOGFILE;
        	sed -i "s/443/$APPLY_CFG2/g" $APACHEDIR/sites-available/000-default-le-ssl.conf
                sed -i "s/443/$APPLY_CFG2/g" $APACHEDIR/ports.conf
                sed -i "s/ServerTokens OS/ServerTokens $APPLY_CFG3/g" $APACHEDIR/conf-available/security.conf
                sed -i "s/ServerSignature Off/ServerSignature $APPLY_CFG4/g" $APACHEDIR/conf-available/security.conf
                sed -i "s/20M/$APPLY_CFG8/g" $PHPDIR/php.ini
		sed -i "s/20M/$APPLY_CFG8/g" $PHPDIR/php.ini

                if [[ "$APPLY_CFG6" == "Yes" ]]; then
                        disp_stat "$DATE - Applying other security settings...\n" | tee -a $LOGFILE;
                        echo " " >> $APACHEDIR/conf-available/security.conf
                        echo "Header set X-Content-Type-Options: \"nosniff\"" >> $APACHEDIR/conf-available/security.conf
                        echo "Header set X-Frame-Options: \"sameorigin\"" >> $APACHEDIR/conf-available/security.conf
                        disp_good "$DATE - Apache modification completed.\n" | tee -a $LOGFILE;
                else
                        disp_good "$DATE - Apache modification completed.\n" | tee -a $LOGFILE;
                fi

                if [[ "$APPLY_CFG7" == "Yes" ]]; then
                        disp_stat "$DATE - Disabling HTTP to run in HTTPS only mode...\n" | tee -a $LOGFILE; sleep 3
                                /usr/sbin/a2dissite 000-default
                                sed -i "s/Listen 80/#Listen 80/g" $APACHEDIR/ports.conf
                        disp_noti "$DATE - Restarting Apache...\n" | tee -a $LOGFILE; sleep 3
                                /usr/bin/systemctl restart apache2
                                lsof -i:80
                                lsof -i:$APPLY_CFG2
                else
                        disp_good "$DATE - Disabling HTTP port not requested.\n" | tee -a $LOGFILE;
                fi

}

# Link the new image to an existing server configuration
function exec_lnksrvr(){

	clear
	# 01 SERVER CODE
	SERVERCODE=$(dialog --title " SERVER CONFIGURATION " \
	--inputbox "`cat $CUSTOM_SERVERCODE`" 10 80 3>&1 1>&2 2>&3 3>&-)
		echo "$SERVERCODE" > $TMPDIR/x1.tmp
	
	clear
	if [[ -d "$STORCON/etc$SERVERCODE" ]] && \
	   [[ -d "$STORPUB/www$SERVERCODE" ]]; then
		systemctl stop apache2
		disp_noti "$DATE - Found both $STORCON/etc$SERVERCODE and $STORCON/etc$SERVERCODE...\n" \
		| tee -a $LOGFILE;sleep 1

		# Check if html, apache2, letsencrypt is existing
		if [[ -d $WEBROOT ]] || \
		   [[ -d /etc/apache2 ]] || \
		   [[ -d /etc/letsencrypt ]]; then
			disp_noti "$DATE - Found entries, renaming html, apache2, letsencrypt...\n" \
			| tee -a $LOGFILE;sleep 1
				mv $WEBROOT $WEBROOT-$DATE
	                        mv /etc/apache2 /etc/apache2-$DATE
        	                mv /etc/letsencrypt /etc/letsencrypt-$DATE
			disp_noti "$DATE - Linking this build to $SERVERCODE...\n" | tee -a $LOGFILE;
				ln -s $STORPUB/www$SERVERCODE $WEBROOT
        			ln -s $STORCON/etc$SERVERCODE/apache2 /etc/apache2
                	        ln -s $STORCON/etc$SERVERCODE/letsencrypt /etc/letsencrypt
			disp_good "$DATE - $SERVERCODE has been linked.\n" | tee -a $LOGFILE; sleep 3
		else
			disp_noti "$DATE - Linking this build to $SERVERCODE...\n" | tee -a $LOGFILE;
	                	ln -s $STORPUB/www$SERVERCODE $WEBROOT
				ln -s $STORCON/etc$SERVERCODE/apache2 /etc/apache2
                		ln -s $STORCON/etc$SERVERCODE/letsencrypt /etc/letsencrypt
			disp_good "$DATE - $SERVERCODE has been linked.\n" | tee -a $LOGFILE; sleep 3
			
		fi
		# Restart apache
		disp_good "$DATE - Restarting Apache...\n" | tee -a $LOGFILE;
		systemctl start apache2
	else
		disp_errr "$DATE - No existing $SERVERCODE servercode found in /storage.\n"; sleep 3
	fi
}

function exec_reporting(){
	echo "Team, this is an audit report for the following provisioning:" > $TMPDIR/prov.tmp;
	echo "" >> $TMPDIR/prov.tmp;
	echo "`date`" >> $TMPDIR/prov.tmp;
	echo "HOSTNAME: `hostname -f`" >> $TMPDIR/prov.tmp;
	echo "SERIAL: `dmidecode -s system-serial-number`" >> $TMPDIR/prov.tmp;
	echo "MANUFACTURER: `dmidecode -s system-manufacturer`" >> $TMPDIR/prov.tmp;
	echo "PRODUCT: `dmidecode -s system-product-name`" >> $TMPDIR/prov.tmp;
	echo "" >> $TMPDIR/prov.tmp;
	
	if [[ -f "/etc/lsb-release" ]]; then
		echo "OPERATING SYSTEM:" >> $TMPDIR/prov.tmp;
		echo "`cat /etc/lsb-release`" >> $TMPDIR/prov.tmp;
      elif [[ -f "/etc/redhat-release" ]]; then
		echo "OPERATING SYSTEM:" >> $TMPDIR/prov.tmp;
	      	echo "`cat /etc/redhat-release`" >> $TMPDIR/prov.tmp;
	else
		echo "Unidentified OS." >> $TMPDIR/prov.tmp;
	fi
	
	echo "" >> $TMPDIR/prov.tmp;
	echo "UPTIME: `uptime`" >> $TMPDIR/prov.tmp;
	echo "" >> $TMPDIR/prov.tmp;
	echo "SHORT SUMMARY:" >> $TMPDIR/prov.tmp;
	echo "`lshw -short`" >> $TMPDIR/prov.tmp;
	echo "" >> $TMPDIR/prov.tmp;
	echo "PROVISIONED BY: $FULLNAME - `date`" >> $TMPDIR/prov.tmp;

	cat $TMPDIR/prov.tmp
	cat $TMPDIR/prov.tmp | mail -s "ARPA - PAREF - $FULLNAME provisioned a server" $EMAIL;
}

function load_customization(){
        clear
        printf "$X$HEADER$Y\n" | tee -a $LOGFILE;sleep 1
        disp_noti "$DATE - Entering GUI...\n" | tee -a $LOGFILE;sleep 2

        # PRIMARY SETTINGS
        MAINOPT=$(dialog --title " ARPACORP - PAREF App Builder " \
                --backtitle "Copyright. Arpacorp. 2021. https://arpa.ph" \
                --menu "`cat $CUSTOM_WELCOME` Choose an option to continue or press cancel.\n" \
                21 80 0 1 "[P]repare the environment." \
                        2 "[S]etup a new server." \
                        3 "[L]ink an existing server." 3>&1 1>&2 2>&3 3>&-)
                echo "$MAINOPT" > $TMPDIR/x0.tmp

        BUILD="`cat $TMPDIR/x0.tmp`";
          if [[ "$BUILD" == "1" ]]; then
                check_binaries
                check_modules
                load_misc
        elif [[ "$BUILD" == "2" ]]; then
                exec_newsrvr
                process_build
		exec_reporting
        elif [[ "$BUILD" == "3" ]]; then
          	exec_lnksrvr
	    	exec_reporting	
          fi
}

# Get fullname for the audit
while [[ -z "$FULLNAME" ]]
do	disp_good "Please enter your full name: "; read -r FULLNAME
      [[ -z "$FULLNAME" ]] && disp_errr "You need to enter your full name to continue.\n"
done

# execute mainopt
load_customization

exit 0
